{"version":3,"sources":["API.ts","components/QuestionStyles.ts","components/QuestionCards.tsx","utils.ts","images/bg.jpg","AppStyles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCards","question","answers","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","bgImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","setUserAnswer","score","setScore","gameOver","setGameOver","setCard","console","log","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","prev","AnswerObj","TOTAL_QUESTIONS","next","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25e5d3c9.chunk.js","sourcesContent":["import { StringLiteralLike } from \"typescript\";\nimport QuestionCards from \"./components/QuestionCards\";\nimport { shuffleArray } from \"./utils\";\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\nmax-width: 1100px;\nborder-radius: 10px;\nborder:2px solid: #0085a3;\npadding: 20px;\nbackground-color: #fff\nbox-shadow: 0, 5, 10 rgba(0 0 0 0.25);\ntext-align:center;\n\np{\n    font-size: 1rem;\n}`\n\ntype ButtonWrapperProps = {\n    correct:boolean;\n    userClicked:boolean;\n}\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\ntransition: all 0.3s ease;\n\n:hover{\n    opacity: 0.8;\n}\n\nbutton {\n    cursor: pointer;\n    user-select:none;\n    font-size: 0.8rem;\n    width:100%;\n    height: 40px;\n    margin 5, 0;\n    background: ${({ correct, userClicked }) =>\n    correct\n    ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n    : !correct && userClicked\n    ? 'linear-gradient(90deg, #ff5656, #c16868)'\n            : 'linear-gradient(90deg, #666666, #666666)'};\n    border: 3 solid #fff;\n    box-shadow: 1 2 0 rgba( 0 0 0 0.1)\n    border-radius: 10;\n    color: #fff;\n    text-shadow: 0 1 0 rgba(0 0 0 0.25); \n}\n`","import React from 'react'\nimport { NumberLiteralType } from 'typescript'\nimport {Wrapper, ButtonWrapper} from './QuestionStyles'\n\nimport { AnswerObj } from '../App'\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObj | undefined;\n    questionNum: number;\n    totalQuestions: number;\n}\n\nconst QuestionCards: React.FC<Props> = ({question, answers, callback, userAnswer, questionNum, totalQuestions}) => (\n        <Wrapper>\n        <p className=\"number\">\n            Question:  {questionNum} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{ __html: question }} />\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper\n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}\n                > <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                    <span dangerouslySetInnerHTML={{__html:answer}} />\n                </button> </ButtonWrapper>\n))}\n        </div>\n        </Wrapper>\n    )\n\n\nexport default QuestionCards\n","export const shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5);","export default __webpack_public_path__ + \"static/media/bg.733fe648.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\n\nimport bgImage from './images/bg.jpg'\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    height:100%,\n}\n\nbody {\nbackground-image: url(${bgImage});\nbackground-size: cover;\nmargin:0;\npadding: 0 20px;\ndisplay:flex;\njustify-content: center;\n}\n\n*{\n    box-sizing: border-box;\n}\n`;\n\nexport const Wrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\n> p {\n    color: #fff;\n}\n.score{\n    color:black;\n    font-size: 2rem;\n    margin:0;\n}\nh1{\n    font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold'. sans-serif;\n    background-size: 100%\n    background-clip:text;\n    filter: drop-shadow(2px 2 px #0085a3);\n    font-size: 70px;\n    font-weight: 400\n    text-align\n}\n\n.start, .next {\n    cursor:pointer;\n    background-color: #fff\nborder:2px solid #d38558;\nbox-shadow: 0px, 5px, 10px rgba( 0, 0, 0, 0.25)\nborder-radius: 10px;\nheight: 40px,\nmargin: 20px 0;\npadding: 0 40px;\n}\n .start {\n     max-width:200px;\n }\n\n\n`\n\n","import React, { useState } from \"react\";\nimport QuestionCards from \"./components/QuestionCards\";\nimport { Difficulty, fetchQuizQuestions, QuestionState } from \"./API\";\nimport { GlobalStyle, Wrapper  } from './AppStyles'\n\n\nexport type AnswerObj = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswer, setUserAnswer] = useState<AnswerObj[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [card, setCard] = useState(false);\n\n  // console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.MEDIUM));\n  console.log(questions);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n    setCard(true);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswer([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //users answer\n      const answer = e.currentTarget.value;\n\n      //check answer w/correct answer\n      const correct = questions[number].correct_answer === answer;\n\n      // add to score if correct\n\n      if (correct) setScore((prev) => prev + 1);\n\n      //save answer\n      const AnswerObj = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswer((prev) => [...prev, AnswerObj]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // move on unless last question\n\n    const next = number + 1;\n\n    if (next === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(next);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n      <h1> React Quiz</h1>\n      {gameOver || userAnswer.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startQuiz}>\n          Start\n        </button>\n      ) : null}\n\n          <div className=\"card mt-5 pl-3 pr-3 pb-3 shadow p-3 mb-5 bg-white rounded\">\n      {!gameOver ? <p className=\"score\">SCORE: { score }</p> : null}\n      {/* {loading ? <p> Loading Questions... </p> : null} */}\n      {loading && <p> Loading Questions... </p>}\n\n      {!loading && !gameOver ? (\n        <QuestionCards\n          questionNum={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswer ? userAnswer[number] : undefined}\n          callback={checkAnswer}\n        />\n      ) : null}\n\n      {!gameOver &&\n      !loading &&\n      userAnswer.length === number + 1 &&\n      number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n      ) : null}\n        </div> \n        </Wrapper>\n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}